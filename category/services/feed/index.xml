<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>Services (服务) &#8211; Eternal Center</title>
	<atom:link href="https://eternalcenter-jun-2022.github.io/category/services/feed/" rel="self" type="application/rss+xml" />
	<link>https://eternalcenter-jun-2022.github.io/</link>
	<description></description>
	<lastBuildDate>Tue, 21 Jun 2022 07:34:28 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	
	<item>
		<title>[内容] PXE 装机模板中软件的删除 （openSUSE &#038; SUSE 版）</title>
		<link>https://eternalcenter-jun-2022.github.io/pxe-remove-opensuse-suse/</link>
		
		<dc:creator><![CDATA[Mingyu Zhu]]></dc:creator>
		<pubDate>Tue, 21 Jun 2022 07:33:42 +0000</pubDate>
				<category><![CDATA[Other Services (其他服务)]]></category>
		<category><![CDATA[Pre-boot Execution Environment (PXE)]]></category>
		<category><![CDATA[Services (服务)]]></category>
		<guid isPermaLink="false">https://eternalcenter-jun-2022.github.io/?p=25945</guid>

					<description><![CDATA[（补充：这里以删除 httpd 软件为例）]]></description>
										<content:encoded><![CDATA[
<pre class="wp-block-code"><code># mv /var/run/zypp.pid /var/run/zypp.sav
# /usr/bin/zypper remove httpd
# mv /var/run/zypp.sav /var/run/zypp.pid</code></pre>



<p>（补充：这里以删除 httpd 软件为例）</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>[步骤] Red Hat Satellite 无法停止任务的强制停止</title>
		<link>https://eternalcenter-jun-2022.github.io/red-hat-satellite-task-forced-stop/</link>
		
		<dc:creator><![CDATA[Mingyu Zhu]]></dc:creator>
		<pubDate>Thu, 09 Jun 2022 11:43:29 +0000</pubDate>
				<category><![CDATA[Chinese (中文)]]></category>
		<category><![CDATA[Other Services (其他服务)]]></category>
		<category><![CDATA[Red Hat Satellite]]></category>
		<category><![CDATA[Services (服务)]]></category>
		<guid isPermaLink="false">https://eternalcenter-jun-2022.github.io/?p=23740</guid>

					<description><![CDATA[步骤一：打一个快照 （步骤略） 步骤二：显示运行结果是错误的任务 （补充：从这里可以看出运行结果是错误的任务标签是 Actions::Katello::ContentView::Publish） 步骤三：强制停止 Red Hat Satellite 无法停止的任务 （补充：这里以强制停止标签为 Actions::Katello::ContentView::Publish 的任务为例）]]></description>
										<content:encoded><![CDATA[
<h3>步骤一：打一个快照</h3>



<p>（步骤略）</p>



<h3>步骤二：显示运行结果是错误的任务</h3>



<pre class="wp-block-code"><code># sudo su - postgres -c "psql -d foreman -c 'select label,count(label),state,result from foreman_tasks_tasks where state &lt;&gt; '\''stopped'\'' group by label,state,result ORDER BY label;'"
                        label                         | count |   state   | result  
------------------------------------------------------+-------+-----------+---------
 Actions::Katello::ContentView::Publish               |     1 | paused    | error
 ......</code></pre>



<p>（补充：从这里可以看出运行结果是错误的任务标签是 Actions::Katello::ContentView::Publish）</p>



<h3>步骤三：强制停止 Red Hat Satellite 无法停止的任务</h3>



<pre class="wp-block-code"><code># foreman-rake foreman_tasks:cleanup TASK_SEARCH='label = Actions::Katello::ContentView::Publish' STATES='paused' VERBOSE=true</code></pre>



<p>（补充：这里以强制停止标签为 Actions::Katello::ContentView::Publish 的任务为例）</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>[内容] NFS 常用参数</title>
		<link>https://eternalcenter-jun-2022.github.io/nfs-parameter/</link>
		
		<dc:creator><![CDATA[Mingyu Zhu]]></dc:creator>
		<pubDate>Fri, 27 May 2022 08:11:45 +0000</pubDate>
				<category><![CDATA[Chinese (中文)]]></category>
		<category><![CDATA[NFS]]></category>
		<category><![CDATA[Services (服务)]]></category>
		<category><![CDATA[Storage Services (存储服务)]]></category>
		<guid isPermaLink="false">https://eternalcenter-jun-2022.github.io/?p=23656</guid>

					<description><![CDATA[内容一：NFS 常用参数 1) no_root_squash 当使用 NFS 共享目录的客户端是以客户端的 root 用户的身份使用，那么对于这个共享目录而言，这个客户端具有 root 权限2) root_squash 当使用 NFS 共享目录的客户端是以客户端的 root 用户的身份使用，那么对于这个共享目录而言，这个客户端依旧没有 root 权限3) 此为默认值，anon=0 禁止使用 NFS 共享目录的客户端以随机身份使用4) anon=1 允许使用 NFS 共享目录的客户端以随机身份使用5) soft 使用 NFS 共享目录的客户端以软挂载的方式进行挂载，若客户端的请求得不到回应，则会重新发出请求并传回错误信息6) 此为默认值，hard 使用 NFS 共享目录的客户端以软挂载的方式进行挂载，若客户端的请求得不到回应，则会一直发出请求直到得到 NFS 服务器的回应为止7) timeo=120 使用 NFS 共享目录的客户端在连接不通后，会以 1/7 秒的时间尝试重新连接，默认会尝试重新连接 7 次，timeo=120 表示会重新尝试连接 120 次8) rw 设置使用 NFS 共享目录的客户端拥有读和写的权限9) nolock 取消文件锁 内容二：NFS &#8230; <p class="link-more"><a href="https://eternalcenter-jun-2022.github.io/nfs-parameter/" class="more-link">Continue reading<span class="screen-reader-text"> "[内容] NFS 常用参数"</span></a></p>]]></description>
										<content:encoded><![CDATA[
<h3>内容一：NFS 常用参数</h3>



<p>1) no_root_squash 当使用 NFS 共享目录的客户端是以客户端的 root 用户的身份使用，那么对于这个共享目录而言，这个客户端具有 root 权限<br>2) root_squash 当使用 NFS 共享目录的客户端是以客户端的 root 用户的身份使用，那么对于这个共享目录而言，这个客户端依旧没有 root 权限<br>3) 此为默认值，anon=0 禁止使用 NFS 共享目录的客户端以随机身份使用<br>4) anon=1 允许使用 NFS 共享目录的客户端以随机身份使用<br>5) soft 使用 NFS 共享目录的客户端以软挂载的方式进行挂载，若客户端的请求得不到回应，则会重新发出请求并传回错误信息<br>6) 此为默认值，hard 使用 NFS 共享目录的客户端以软挂载的方式进行挂载，若客户端的请求得不到回应，则会一直发出请求直到得到 NFS 服务器的回应为止<br>7) timeo=120 使用 NFS 共享目录的客户端在连接不通后，会以 1/7 秒的时间尝试重新连接，默认会尝试重新连接 7 次，timeo=120 表示会重新尝试连接 120 次<br>8) rw 设置使用 NFS 共享目录的客户端拥有读和写的权限<br>9) nolock 取消文件锁</p>



<h3>内容二：NFS 的挂载案例</h3>



<pre class="wp-block-code"><code># cat /etc/fstab
192.168.0.1:/test /test nfs timeo=120,rw,soft,nolock 0 0</code></pre>



<p>（<br>补充：这里以<br>1) 挂载 192.168.0.1:/test 的目录到本地的 /test 目录<br>2) 以 nfs 格式进行挂载<br>3) 客户端在连接不通后会重新尝试连接 120 次<br>4) 客户端拥有读和写的权限<br>5) 以软挂载的方式进行挂载<br>6) 取消文件锁<br>7) 不进行数据备份<br>8) 不进行数据校验<br>为例<br>）</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>[步骤] Red Hat Satellite Content View 信息的显示</title>
		<link>https://eternalcenter-jun-2022.github.io/red-hat-satellite-cv-display/</link>
		
		<dc:creator><![CDATA[Mingyu Zhu]]></dc:creator>
		<pubDate>Fri, 27 May 2022 06:38:38 +0000</pubDate>
				<category><![CDATA[Chinese (中文)]]></category>
		<category><![CDATA[Other Services (其他服务)]]></category>
		<category><![CDATA[Red Hat Satellite]]></category>
		<category><![CDATA[Services (服务)]]></category>
		<guid isPermaLink="false">https://eternalcenter-jun-2022.github.io/?p=23638</guid>

					<description><![CDATA[步骤一：显示所有 Content View 的 ID 步骤二：显示某 1 个 Content View 的详细信息 （补充：这里以显示 ID 为 10 的 Content View 的信息为例）]]></description>
										<content:encoded><![CDATA[
<h3>步骤一：显示所有 Content View 的 ID</h3>



<pre class="wp-block-code"><code># hammer content-view list

----------------|---------------------------|--------------------------------------|-----------|---------------------|---------------------------------------------------------------------------------
CONTENT VIEW ID | NAME                      | LABEL                                | COMPOSITE | LAST PUBLISHED      | REPOSITORY IDS                                                                  
----------------|---------------------------|--------------------------------------|-----------|---------------------|---------------------------------------------------------------------------------
10              | test_CV                   | test_CV                              | false     | 2022/06/23 20:20:20 | 61525, 16812, 61524, 16814, 16813, 16811, 16816, 16817, 6578, 231, 8, 9, 131,...</code></pre>



<h3>步骤二：显示某 1 个 Content View 的详细信息</h3>



<pre class="wp-block-code"><code># hammer content-view info --id 10</code></pre>



<p>（补充：这里以显示 ID 为 10 的 Content View 的信息为例）</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>[步骤] SFTP 安全 （限制 SSH 登录、锁定目录范围和端口分离版）</title>
		<link>https://eternalcenter-jun-2022.github.io/sftp-safe-restrict-ssh-login-lock-directory-range-and-port-separation/</link>
		
		<dc:creator><![CDATA[Mingyu Zhu]]></dc:creator>
		<pubDate>Mon, 23 May 2022 12:35:18 +0000</pubDate>
				<category><![CDATA[Chinese (中文)]]></category>
		<category><![CDATA[Services (服务)]]></category>
		<category><![CDATA[SFTP]]></category>
		<category><![CDATA[Storage Services (存储服务)]]></category>
		<guid isPermaLink="false">https://eternalcenter-jun-2022.github.io/?p=23578</guid>

					<description><![CDATA[步骤一：创建 SFTP 用户的组 步骤二：创建用于 SFTP 的主目录 2.1 创建用于 SFTP 的主目录 （补充：这里以创建 /sftp 目录为例） 2.2 设置用于 SFTP 的主目录的所属组和所属主 （补充：这里以给 /sftp 设置 root 主和 sftp 组为例） 2.3 设置用于 SFTP 的主目录的权限 （补充：这里以给 /sftp 目录权限为例） 步骤三：让 SSH 的配置文件和 SFTP 的配置文件分离 3.1 创建新的 SFTP 配置文件 3.2 让 SSH 的配置文件和 SFTP 的配置文件分离 3.2.1 从 SSH 的配置文件里去除关于 SFTP 的设置 如果是 CentOS Linux &#8230; <p class="link-more"><a href="https://eternalcenter-jun-2022.github.io/sftp-safe-restrict-ssh-login-lock-directory-range-and-port-separation/" class="more-link">Continue reading<span class="screen-reader-text"> "[步骤] SFTP 安全 （限制 SSH 登录、锁定目录范围和端口分离版）"</span></a></p>]]></description>
										<content:encoded><![CDATA[
<h3>步骤一：创建 SFTP 用户的组</h3>



<pre class="wp-block-code"><code># groupadd sftp</code></pre>



<h3>步骤二：创建用于 SFTP 的主目录</h3>



<h4>2.1 创建用于 SFTP 的主目录</h4>



<pre class="wp-block-code"><code># mkdir /sftp</code></pre>



<p>（补充：这里以创建 /sftp 目录为例）</p>



<h4>2.2 设置用于 SFTP 的主目录的所属组和所属主</h4>



<pre class="wp-block-code"><code># chown root:sftp /sftp</code></pre>



<p>（补充：这里以给 /sftp 设置 root 主和 sftp 组为例）</p>



<h4>2.3 设置用于 SFTP 的主目录的权限</h4>



<pre class="wp-block-code"><code># chmod 755 /sftp</code></pre>



<p>（补充：这里以给 /sftp 目录权限为例）</p>



<h3>步骤三：让 SSH 的配置文件和 SFTP 的配置文件分离</h3>



<h4>3.1 创建新的 SFTP 配置文件</h4>



<pre class="wp-block-code"><code># cp /etc/ssh/sshd_config /etc/ssh/sshdsftp_config</code></pre>



<h4>3.2 让 SSH 的配置文件和 SFTP 的配置文件分离</h4>



<h5>3.2.1 从 SSH 的配置文件里去除关于 SFTP 的设置</h5>



<pre class="wp-block-code"><code># vim /etc/ssh/sshd_config</code></pre>



<p>如果是 CentOS Linux &amp; RHEL，将以下内容：</p>



<pre class="wp-block-code"><code>......
Subsystem  sftp    /usr/libexec/openssh/sftp-server
......</code></pre>



<p>修改为：</p>



<pre class="wp-block-code"><code>......
#Subsystem  sftp    /usr/libexec/openssh/sftp-server
......</code></pre>



<p>如果是 openSUSE &amp; SLE， 将以下内容：</p>



<pre class="wp-block-code"><code>......
Subsystem       sftp    /usr/lib/ssh/sftp-server
......</code></pre>



<p>修改为：</p>



<pre class="wp-block-code"><code>......
# Subsystem       sftp    /usr/lib/ssh/sftp-server
......</code></pre>



<h5>3.2.2 从 SFTP 的配置文件里去除关于 SSH 的设置并添加关于 SFTP 的设置</h5>



<pre class="wp-block-code"><code># vim /etc/ssh/sshdsftp_config</code></pre>



<p>将以下内容：</p>



<pre class="wp-block-code"><code>......
#Port 22
......</code></pre>



<p>修改为：</p>



<pre class="wp-block-code"><code>......
Port 2222
......</code></pre>



<p>并添加以下内容：</p>



<pre class="wp-block-code"><code>......
Subsystem       sftp    internal-sftp
Match LocalPort 2222
ChrootDirectory /sftp/%u
ForceCommand    internal-sftp
AllowTcpForwarding no
X11Forwarding no</code></pre>



<p>（补充：这里以将 sftp 的端口设置为 2222 为例）</p>



<h3>步骤四：让创建新的 SFTP 配置文件被 systemctl 管理</h3>



<h4>4.1 创建管理 SFTP 配置文件的 systemctl 管理文件</h4>



<pre class="wp-block-code"><code># cp /usr/lib/systemd/system/sshd.service /etc/systemd/system/sshdsftp.service</code></pre>



<h4>4.2 修改管理 SFTP 配置文件的 systemctl 管理文件</h4>



<pre class="wp-block-code"><code># vim /etc/systemd/system/sshdsftp.service</code></pre>



<p>将以下内容：</p>



<pre class="wp-block-code"><code>......
Description=OpenSSH server daemon
......
ExecStart=/usr/sbin/sshd -D $OPTIONS $CRYPTO_POLICY
......</code></pre>



<p>修改为：</p>



<pre class="wp-block-code"><code>......
Description=OpenSSH SFTP server daemon
......
ExecStart=/usr/sbin/sshd -D -f /etc/ssh/sshdsftp_config $OPTIONS $CRYPTO_POLICY
......</code></pre>



<h4>4.2 管理 SFTP 配置文件的 systemctl 管理文件</h4>



<pre class="wp-block-code"><code># systemctl daemon-reload</code></pre>



<h3>步骤五：对 SFTP 使用新端口</h3>



<h4>5.1 在防火墙上允许被 SFTP 使用的端口可以被访问</h4>



<h5>5.1.1 在防火墙上允许被 SFTP 使用的端口可以被访问</h5>



<pre class="wp-block-code"><code># firewall-cmd --add-port=2222/tcp --perm</code></pre>



<p>（补充：这里以在防火墙上开通 2222 端口为例）</p>



<h5>5.1.2 让新的防火墙策略立刻生效</h5>



<pre class="wp-block-code"><code># firewall-cmd --reload</code></pre>



<h4>5.2 在 SELinux 上给 SFTP 使用的端口打上 SSHD 的标签</h4>



<pre class="wp-block-code"><code># semanage port -a -t ssh_port_t -p tcp 2222</code></pre>



<p>（补充：这里以给 2222 端口打上 SSH 的标签为例）</p>



<p>（注意：此步骤只有在 SELinux 开启，且处于 enforcing 状态时才需要设置）</p>



<h3>步骤六：重启 SSHD，开启 SFTP 并将 SFTP 设置为开机自启</h3>



<h4>6.1 重启 SSHD</h4>



<pre class="wp-block-code"><code># systemctl restart sshd</code></pre>



<h4>6.2 开启 SFTP 并将 SFTP 设置为开机自启</h4>



<pre class="wp-block-code"><code># systemctl enable --now sshdsftp</code></pre>



<h3>步骤七：创建 SFTP 用户</h3>



<h4>7.1 创建 SFTP 用户</h4>



<h5>7.1.1 创建 SFTP 用户</h5>



<pre class="wp-block-code"><code># useradd -g sftp -s /bin/false sftpuser</code></pre>



<p>（补充：这里以创建名为 sftpuser，所属组为 sftp，解释器是 /bin/false 的用户为例）</p>



<h5>7.1.2 给 SFTP 用户设置密码</h5>



<pre class="wp-block-code"><code># passwd sftpuser</code></pre>



<p>（补充：这里以给 sftpuser 用户设置密码为例）</p>



<h4>7.2 创建 SFTP 用户的主目录</h4>



<h5>7.2.1 创建 SFTP 用户的主目录</h5>



<pre class="wp-block-code"><code># mkdir /sftp/sftpuser</code></pre>



<p>（补充：这里以创建 /sftp/sftpuser 目录为例）</p>



<h5>7.2.2 设置 SFTP 用户的主目录的所属组和所属主</h5>



<pre class="wp-block-code"><code># chown root:sftp /sftp/sftpuser</code></pre>



<p>（补充：这里以给 /sftp/sftpuser 设置 root 主和 sftp 组为例）</p>



<h5>7.2.3 设置 SFTP 用户的主目录的权限</h5>



<pre class="wp-block-code"><code># chmod 755 /sftp/sftpuser</code></pre>



<p>（补充：这里以给 /sftp/sftpuser 目录权限为例）</p>



<h4>7.3 创建 SFTP 用户有写入权限的目录</h4>



<h5>7.3.1 创建 SFTP 用户有写入权限的目录</h5>



<pre class="wp-block-code"><code># mkdir /sftp/sftpuser/write</code></pre>



<p>（补充：这里以创建 /sftp/sftpuser/write 目录为例）</p>



<h5>7.3.2 设置 SFTP 用户有写入权限的目录的所属组和所属主</h5>



<pre class="wp-block-code"><code># chown sftpuser:sftp /sftp/sftpuser/write</code></pre>



<p>（补充：这里以给 /sftp/sftpuser/write 设置 sftpuser 主和 sftp 组为例）</p>



<h5>7.3.3 创建 SFTP 用户有写入权限的目录的权限</h5>



<pre class="wp-block-code"><code># chmod 755 /sftp/sftpuser/write</code></pre>



<p>（补充：这里以给 /sftp/sftpuser/write 目录权限为例）</p>



<h3>步骤八：测试 SFTP</h3>



<h4>8.1 创建测试用户</h4>



<h5>8.1.1 创建测试用户</h5>



<pre class="wp-block-code"><code># useradd nosftpuser</code></pre>



<p>（补充：这里以创建测试用户 nosftpuser 为例）</p>



<h5>8.1.2 给测试用户设置密码</h5>



<pre class="wp-block-code"><code># passwd nosftpuser</code></pre>



<h4>8.2 测试 SFTP 用户无法 SSH</h4>



<pre class="wp-block-code"><code># ssh sftpuser@127.0.0.1</code></pre>



<p>（补充：这里以测试用户是 sftpuser 为例）</p>



<h4>8.3 测试 SFTP 目录范围</h4>



<h5>8.3.1 登陆 SFTP</h5>



<pre class="wp-block-code"><code># sftp -P 2222 sftpuser@127.0.0.1
Connected to sftpuser@127.0.0.1.
sftp&gt;</code></pre>



<p>（补充：这里以 SFTP 端口是 2222，SFTP 目录时 /sftp ，测试用户是 sftpuser 为例）</p>



<h5>8.3.2 确认 SFTP 根目录</h5>



<h5>8.3.2.1 切换到 SFTP 的根目录</h5>



<pre class="wp-block-code"><code>sftp&gt; cd /</code></pre>



<h5>8.3.2.2 显示 SFTP 根目录下的文件或目录</h5>



<pre class="wp-block-code"><code>sftp&gt; ls
write  
sftp&gt;</code></pre>



<p>（补充：此时发现目前 SFTP 的根并不是 Linux 系统的根目录）</p>



<h4>8.4 测试 SSH 和 SFTP 分离</h4>



<h5>8.4.1 SSH 测试</h5>



<h5>8.4.1.1 SSH 端口可以正常 SSH</h5>



<pre class="wp-block-code"><code># ssh nosftpuser@127.0.0.1</code></pre>



<p>（补充：这里以 SSH 端口是 22，测试用户是 nosftpuser 为例）</p>



<h5>8.4.1.2 SFTP 端口不可以被 SSH</h5>



<h5>8.4.1.2.1 家目录在 SFTP 目录的用户通过 SFTP 端口 SSH</h5>



<pre class="wp-block-code"><code># ssh -p 2222 sftpuser@127.0.0.1
nosftpuser@192.168.8.58's password: 
This service allows sftp connections only.
Connection to 10.0.0.3 closed.
#</code></pre>



<p>（补充：这里以 SFTP 端口是 2222，SFTP 目录是 /sftp，测试用户是 sftpuser 为例）</p>



<h5>8.4.1.2.2 家目录不在 SFTP 目录的用户通过 SFTP 端口 SSH</h5>



<pre class="wp-block-code"><code># ssh -p 2222 nosftpuser@127.0.0.1
client_loop: send disconnect: Broken pipe
#</code></pre>



<p>（补充：这里以 SFTP 端口是 2222，SFTP 目录是 /sftp，测试用户是 nosftpuser 为例）</p>



<h5>8.4.2 SFTP 测试</h5>



<h5>8.4.2.1 SSH 端口不可以 SFTP</h5>



<pre class="wp-block-code"><code># sftp sftpuser@127.0.0.1
subsystem request failed on channel 0
Connection closed
#</code></pre>



<p>（补充：这里以 SFTP 端口是 22，测试用户是 sftpuser 为例）</p>



<h5>8.4.2.2 家目录不在 SFTP 下的用户不可以 SFTP</h5>



<pre class="wp-block-code"><code># sftp -P 2222 nosftpuser@127.0.0.1
client_loop: send disconnect: Broken pipe
Connection closed
#</code></pre>



<p>（补充：这里以 SFTP 端口是 2222，SFTP 目录时 /sftp，测试用户是 nosftpuser 为例）</p>



<h5>8.4.2.3 家目录在 SFTP 下的用户可以通过 SFTP 端口 SFTP</h5>



<pre class="wp-block-code"><code># sftp -P 2222 sftpuser@127.0.0.1
Connected to sftpuser@127.0.0.1.
sftp&gt;</code></pre>



<p>（补充：这里以 SFTP 端口是 2222，SFTP 目录时 /sftp ，测试用户是 nosftpuser 为例）</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>[工具] Shell 测试 SFTP 服务</title>
		<link>https://eternalcenter-jun-2022.github.io/shell-sftp-test/</link>
		
		<dc:creator><![CDATA[Mingyu Zhu]]></dc:creator>
		<pubDate>Sat, 14 May 2022 14:11:28 +0000</pubDate>
				<category><![CDATA[Chinese (中文)]]></category>
		<category><![CDATA[Languages (语言)]]></category>
		<category><![CDATA[Services (服务)]]></category>
		<category><![CDATA[SFTP]]></category>
		<category><![CDATA[Shell]]></category>
		<category><![CDATA[Shell Monitor (监控)]]></category>
		<category><![CDATA[Shell Tool (工具)]]></category>
		<category><![CDATA[Storage Services (存储服务)]]></category>
		<category><![CDATA[System (系统)]]></category>
		<category><![CDATA[System Login Security (系统登录安全)]]></category>
		<category><![CDATA[System Network & System Security & System Log (系统网络 & 系统安全 & 系统日志)]]></category>
		<category><![CDATA[System Operation (系统操作)]]></category>
		<category><![CDATA[System Operation & System Setting & System Software (系统操作 & 系统设置 & 系统软件)]]></category>
		<category><![CDATA[System Security (系统安全)]]></category>
		<guid isPermaLink="false">https://eternalcenter-jun-2022.github.io/?p=23553</guid>

					<description><![CDATA[介绍 作者：朱明宇名称：测试 SFTP 服务作用：测试 SFTP 服务 使用方法： 1. 在此脚本的分割线内写入相应的内容2. 给此脚本添加执行权限3. 执行此脚本 脚本分割线里的变量：IP=10.0.0.8 #要测试 SFTP 的服务器 IP 地址 注意：此脚本执行前必须要先保证执行脚本的主机能无秘钥远程需要测试 SFTP 服务的服务器 脚本]]></description>
										<content:encoded><![CDATA[
<h2>介绍</h2>



<p>作者：朱明宇<br>名称：测试 SFTP 服务<br>作用：测试 SFTP 服务</p>



<p>使用方法：</p>



<p>1. 在此脚本的分割线内写入相应的内容<br>2. 给此脚本添加执行权限<br>3. 执行此脚本</p>



<p>脚本分割线里的变量：<br>IP=10.0.0.8 #要测试 SFTP 的服务器 IP 地址 </p>



<p>注意：此脚本执行前必须要先保证执行脚本的主机能无秘钥远程需要测试 SFTP 服务的服务器</p>



<h2>脚本</h2>



<pre class="wp-block-code"><code>#!/bin/bash

####################### Separator ########################
IP=10.0.0.8
####################### Separator ########################

set timeout 3

rpm -q expect &amp;&gt; /dev/null
if &#91; $? -ne 0 ];then
        echo "Expect needs to be installed first"
fi

expect &lt;&lt; EOF
spawn sftp $IP
expect "sftp&gt;"                                   {send "cd /tmp\r" } 
expect "sftp&gt;"                                   {send "ls -l\r"}
expect "sftp&gt;"                                   {send "quit\r"}
expect "&gt;"                                       {send "\r"}
EOF</code></pre>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>[内容] SUSE Repository Mirroring Tool (RMT) 代理的设置</title>
		<link>https://eternalcenter-jun-2022.github.io/rmt-proxy/</link>
		
		<dc:creator><![CDATA[Mingyu Zhu]]></dc:creator>
		<pubDate>Thu, 28 Apr 2022 11:26:11 +0000</pubDate>
				<category><![CDATA[Chinese (中文)]]></category>
		<category><![CDATA[Other Services (其他服务)]]></category>
		<category><![CDATA[Services (服务)]]></category>
		<category><![CDATA[SUSE Repository Mirroring Tool (RMT)]]></category>
		<guid isPermaLink="false">https://eternalcenter-jun-2022.github.io/?p=23351</guid>

					<description><![CDATA[将部分内容修改如下： （补充：这里以将代理服务器设置为网址是 https://eternalcenter-jun-2022.github.io，端口是/ 8000，没有用户和密码为例）]]></description>
										<content:encoded><![CDATA[
<pre class="wp-block-code"><code># vim /etc/rmt.conf</code></pre>



<p>将部分内容修改如下：</p>



<pre class="wp-block-code"><code>http_client:
  verbose: false
  proxy: https://eternalcenter-jun-2022.github.io:8000/
  proxy_auth: 
  proxy_user: 
  proxy_password: </code></pre>



<p>（补充：这里以将代理服务器设置为网址是 https://eternalcenter-jun-2022.github.io，端口是/ 8000，没有用户和密码为例）</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>[步骤] Red Hat Satellite 打补丁或升级</title>
		<link>https://eternalcenter-jun-2022.github.io/red-hat-satellite-patch-upgrade/</link>
		
		<dc:creator><![CDATA[Mingyu Zhu]]></dc:creator>
		<pubDate>Mon, 25 Apr 2022 09:01:00 +0000</pubDate>
				<category><![CDATA[Chinese (中文)]]></category>
		<category><![CDATA[Other Services (其他服务)]]></category>
		<category><![CDATA[Red Hat Satellite]]></category>
		<category><![CDATA[Services (服务)]]></category>
		<guid isPermaLink="false">https://eternalcenter-jun-2022.github.io/?p=23278</guid>

					<description><![CDATA[步骤一：备份系统 1.1 关闭 Red Hat Satellite 服务 1.2 备份系统 （补充：这里以备份虚拟环境下的 Red Hat Satellite 为例） 1.2.1 关闭系统 1.2.2 给系统打快照 （步骤略） 1.2.3 启动系统 （步骤略） 步骤二：升级 Red Hat Satellite 或给 Red Hat Satellite 打补丁 2.1 检测可升级 RedHat Satellite 版本 2.2 预检测升级 Red Hat Satellite 或给 Red Hat Satellite 打补丁是否能成功 （注意：如果是升级 Red Hat Satellite 的话就指定最新的版本，如果是给 Red Hat Satellite 打补丁的话就选择当前的版本） &#8230; <p class="link-more"><a href="https://eternalcenter-jun-2022.github.io/red-hat-satellite-patch-upgrade/" class="more-link">Continue reading<span class="screen-reader-text"> "[步骤] Red Hat Satellite 打补丁或升级"</span></a></p>]]></description>
										<content:encoded><![CDATA[
<h3>步骤一：备份系统</h3>



<h4>1.1 关闭 Red Hat Satellite 服务</h4>



<pre class="wp-block-code"><code># satellite-maintain service stop</code></pre>



<h4>1.2 备份系统</h4>



<p>（补充：这里以备份虚拟环境下的 Red Hat Satellite 为例）</p>



<h5>1.2.1 关闭系统</h5>



<pre class="wp-block-code"><code># poweroff</code></pre>



<h5>1.2.2 给系统打快照</h5>



<p>（步骤略）</p>



<h5>1.2.3 启动系统</h5>



<p>（步骤略）</p>



<h3>步骤二：升级 Red Hat Satellite 或给 Red Hat Satellite 打补丁</h3>



<h4>2.1 检测可升级 RedHat Satellite 版本</h4>



<pre class="wp-block-code"><code># satellite-maintain upgrade list-versions</code></pre>



<h4>2.2 预检测升级 Red Hat Satellite 或给 Red Hat Satellite 打补丁是否能成功</h4>



<pre class="wp-block-code"><code># satellite-maintain upgrade check --target-version 6.10.z</code></pre>



<p>（注意：如果是升级 Red Hat Satellite 的话就指定最新的版本，如果是给 Red Hat Satellite 打补丁的话就选择当前的版本）</p>



<p>（补充：这里以指定 6.10.z 版本的 Red Hat Satellite 为例）</p>



<h4>2.3 升级 Red Hat Satellite 或给 Red Hat Satellite 打补丁</h4>



<pre class="wp-block-code"><code># satellite-maintain upgrade run --target-version 6.10.z</code></pre>



<p>（<br>注意：<br>1) 只有当预检测升级 Red Hat Satellite 或给 Red Hat Satellite 打补丁成功后才能接着执行此步骤<br>2) 如果是升级 Red Hat Satellite 的话就指定最新的版本，如果是给 Red Hat Satellite 打补丁的话就选择当前的版本<br>）</p>



<p>（补充：这里以指定 6.10.z 版本的 Red Hat Satellite 为例）</p>



<h3>步骤三：重启 Red Hat Satellite</h3>



<h4>3.1 关闭 Red Hat Satellite 服务</h4>



<pre class="wp-block-code"><code># satellite-maintain service stop</code></pre>



<h4>3.2 重启 Red Hat Satellite</h4>



<pre class="wp-block-code"><code># reboot</code></pre>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>[[内容] Linux 官方软件库列表 （RHEL 8 版）</title>
		<link>https://eternalcenter-jun-2022.github.io/official-software-repository-list-rhel/</link>
		
		<dc:creator><![CDATA[Mingyu Zhu]]></dc:creator>
		<pubDate>Sat, 23 Apr 2022 15:24:12 +0000</pubDate>
				<category><![CDATA[Chinese (中文)]]></category>
		<category><![CDATA[Other Services (其他服务)]]></category>
		<category><![CDATA[Red Hat Satellite]]></category>
		<category><![CDATA[Services (服务)]]></category>
		<category><![CDATA[System (系统)]]></category>
		<category><![CDATA[System Operation & System Setting & System Software (系统操作 & 系统设置 & 系统软件)]]></category>
		<category><![CDATA[System Software (系统软件)]]></category>
		<guid isPermaLink="false">https://eternalcenter-jun-2022.github.io/?p=23248</guid>

					<description><![CDATA[内容一：基础软件源 内容二：Red Hat Satellite Tool 软件源 （补充：这里以 Red Hat Satellite Tool 6.10 软件源为例）]]></description>
										<content:encoded><![CDATA[
<h3>内容一：基础软件源</h3>



<pre class="wp-block-code"><code>rhel-8-for-x86_64-baseos-rpms</code></pre>



<pre class="wp-block-code"><code>rhel-8-for-x86_64-appstream-rpms</code></pre>



<h3>内容二：Red Hat Satellite Tool 软件源</h3>



<pre class="wp-block-code"><code>satellite-tools-6.10-for-rhel-8-x86_64-rpms</code></pre>



<p>（补充：这里以 Red Hat Satellite Tool 6.10 软件源为例）</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>[内容] 全球公共免费 DNS</title>
		<link>https://eternalcenter-jun-2022.github.io/free-dns/</link>
		
		<dc:creator><![CDATA[Mingyu Zhu]]></dc:creator>
		<pubDate>Thu, 14 Apr 2022 15:24:23 +0000</pubDate>
				<category><![CDATA[Chinese (中文)]]></category>
		<category><![CDATA[DNS]]></category>
		<category><![CDATA[Other Services (其他服务)]]></category>
		<category><![CDATA[Services (服务)]]></category>
		<category><![CDATA[System (系统)]]></category>
		<category><![CDATA[System Network (系统网络)]]></category>
		<category><![CDATA[System Network & System Security & System Log (系统网络 & 系统安全 & 系统日志)]]></category>
		<category><![CDATA[System Operation & System Setting & System Software (系统操作 & 系统设置 & 系统软件)]]></category>
		<category><![CDATA[System Setting (系统设置)]]></category>
		<guid isPermaLink="false">https://eternalcenter-jun-2022.github.io/?p=23164</guid>

					<description><![CDATA[AdGuard Cloudflare COMODO DNS Watch Dyn Level 3 Neustar FreeDNS Google OpenDNS SAFEDNS Symantec]]></description>
										<content:encoded><![CDATA[
<h3>AdGuard</h3>



<pre class="wp-block-code"><code>94.140.14.14
94.140.14.15
94.140.15.15
94.140.15.16</code></pre>



<h3>Cloudflare</h3>



<pre class="wp-block-code"><code>1.0.0.1
1.0.0.2
1.0.0.3
1.1.1.1
1.1.1.2
1.1.1.3</code></pre>



<h3>COMODO</h3>



<pre class="wp-block-code"><code>8.20.247.20
8.26.56.26</code></pre>



<h3>DNS Watch</h3>



<pre class="wp-block-code"><code>84.200.69.80
84.200.70.40</code></pre>



<h3>Dyn</h3>



<pre class="wp-block-code"><code>216.146.35.35
216.146.36.36</code></pre>



<h3>Level 3</h3>



<pre class="wp-block-code"><code>209.244.0.3
209.244.0.4</code></pre>



<h3>Neustar</h3>



<pre class="wp-block-code"><code>156.154.70.1
156.154.71.1</code></pre>



<h3>FreeDNS</h3>



<pre class="wp-block-code"><code>37.235.1.174
37.235.1.177</code></pre>



<h3>Google</h3>



<pre class="wp-block-code"><code>8.8.4.4
8.8.8.8</code></pre>



<h3>OpenDNS</h3>



<pre class="wp-block-code"><code>208.67.220.220
208.67.222.222</code></pre>



<h3>SAFEDNS</h3>



<pre class="wp-block-code"><code>195.46.39.39
195.46.39.40</code></pre>



<h3>Symantec</h3>



<pre class="wp-block-code"><code>199.85.126.10
199.85.137.10</code></pre>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>[排错] 解决 Linux 日志报错：“hash:/etc/aliases is unavailable.open database /etc/aliases.db” 或者 “error: open database /etc/aliases.db: No such file or directory”</title>
		<link>https://eternalcenter-jun-2022.github.io/debug-hash-etc-aliases-is-unavailable-open-database-etc-aliases-db-or-error-open-database-etc-aliases-db-no-such-file-or-directory/</link>
		
		<dc:creator><![CDATA[Mingyu Zhu]]></dc:creator>
		<pubDate>Mon, 04 Apr 2022 09:54:35 +0000</pubDate>
				<category><![CDATA[Chinese (中文)]]></category>
		<category><![CDATA[Mail]]></category>
		<category><![CDATA[Other Services (其他服务)]]></category>
		<category><![CDATA[Services (服务)]]></category>
		<category><![CDATA[System (系统)]]></category>
		<category><![CDATA[System Operation (系统操作)]]></category>
		<category><![CDATA[System Operation & System Setting & System Software (系统操作 & 系统设置 & 系统软件)]]></category>
		<guid isPermaLink="false">https://eternalcenter-jun-2022.github.io/?p=22729</guid>

					<description><![CDATA[报错代码 或者： 解决方法]]></description>
										<content:encoded><![CDATA[
<h3>报错代码</h3>



<pre class="wp-block-code"><code>hash:/etc/aliases is unavailable.open database /etc/aliases.db</code></pre>



<p>或者：</p>



<pre class="wp-block-code"><code>error: open database /etc/aliases.db: No such file or directory</code></pre>



<h3>解决方法</h3>



<pre class="wp-block-code"><code># newaliases</code></pre>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>[排错] 解决 openSUSE &#038; SLE 升级系统时报错 “Can&#8217;t get available migrations from server: SUSE::Connect::ApiError: Multiple base products found:&#8230;&#8230;”</title>
		<link>https://eternalcenter-jun-2022.github.io/debug-cant-get-available-migrations-from-server-suseconnectapierror-multiple-base-products-found/</link>
		
		<dc:creator><![CDATA[Mingyu Zhu]]></dc:creator>
		<pubDate>Thu, 03 Mar 2022 08:00:33 +0000</pubDate>
				<category><![CDATA[Chinese (中文)]]></category>
		<category><![CDATA[Other Services (其他服务)]]></category>
		<category><![CDATA[Services (服务)]]></category>
		<category><![CDATA[SUSE Repository Mirroring Tool (RMT)]]></category>
		<category><![CDATA[System (系统)]]></category>
		<category><![CDATA[System Computer & System Hardware & System Installation & System Upgradation (系统电脑 & 系统硬件 & 系统安装 & 系统升级)]]></category>
		<category><![CDATA[System Upgradation (系统升级)]]></category>
		<guid isPermaLink="false">https://eternalcenter-jun-2022.github.io/?p=22328</guid>

					<description><![CDATA[报错代码 分析 当上一次升级失败或者升级回滚了以后可能会报此类错误 解决方法 方法一：通过 SUSEConnect 命令回滚 1.1 通过 SUSEConnect 命令回滚 # SUSEConnect &#8211;rollback 1.2 重新升级 （步骤略） 步骤二：取消注册再重新注册 2.1 取消注册再重新注册 （步骤略） 2.2 重新升级 （步骤略） 参考文献： https://www.suse.com/support/kb/doc/?id=000019523]]></description>
										<content:encoded><![CDATA[
<h2>报错代码</h2>



<pre class="wp-block-code"><code>Can't get available migrations from server: SUSE::Connect::ApiError: Multiple base products found: ......</code></pre>



<h2>分析</h2>



<p>当上一次升级失败或者升级回滚了以后可能会报此类错误</p>



<h2>解决方法</h2>



<h3>方法一：通过 SUSEConnect 命令回滚</h3>



<h4>1.1 通过 SUSEConnect 命令回滚</h4>



<p># SUSEConnect &#8211;rollback</p>



<h4>1.2 重新升级</h4>



<p>（步骤略）</p>



<h3>步骤二：取消注册再重新注册</h3>



<h4>2.1 取消注册再重新注册</h4>



<p>（步骤略）</p>



<h4>2.2 重新升级</h4>



<p>（步骤略）</p>



<h1>参考文献：</h1>



<p class="has-text-align-center">https://www.suse.com/support/kb/doc/?id=000019523</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>[工具] Shell 监控普通登录记录 （排除 SFTP 登录记录只监控普通登录记录）</title>
		<link>https://eternalcenter-jun-2022.github.io/shell-login-log-exclude-sftp/</link>
		
		<dc:creator><![CDATA[Mingyu Zhu]]></dc:creator>
		<pubDate>Tue, 15 Feb 2022 14:52:50 +0000</pubDate>
				<category><![CDATA[Chinese (中文)]]></category>
		<category><![CDATA[Languages (语言)]]></category>
		<category><![CDATA[Other Services (其他服务)]]></category>
		<category><![CDATA[Services (服务)]]></category>
		<category><![CDATA[SFTP]]></category>
		<category><![CDATA[Shell]]></category>
		<category><![CDATA[Shell Monitor (监控)]]></category>
		<category><![CDATA[Shell Tool (工具)]]></category>
		<category><![CDATA[Storage Services (存储服务)]]></category>
		<category><![CDATA[System (系统)]]></category>
		<category><![CDATA[System General Log (系统普通日志)]]></category>
		<category><![CDATA[System Log (系统日志)]]></category>
		<category><![CDATA[System Network & System Security & System Log (系统网络 & 系统安全 & 系统日志)]]></category>
		<guid isPermaLink="false">https://eternalcenter-jun-2022.github.io/?p=21977</guid>

					<description><![CDATA[注意： 在排除 SFTP 登录记录只监控普通登录记录前要先开启 SFTP 日志： 正文： 介绍 作者：朱明宇名称：监控普通登录记录 （排除 SFTP 登录记录只监控普通登录记录）作用：监控普通登录记录 （排除 SFTP 登录记录只监控普通登录记录） 使用方法：1. 在此脚本的分割线内写入相应的内容2. 给此脚本添加执行权限3. 执行此脚本4. 普通登录记录会同时记录在系统日志和 $logfile 里 脚本分割线里的变量：1. logfile=logfile.txt #用户保存记录的文件2. prompt=&#8221;and no sftp info&#8221; #记录里普通登录记录的文件 脚本]]></description>
										<content:encoded><![CDATA[
<h1 id="注意">注意：</h1>



<p>在排除 SFTP 登录记录只监控普通登录记录前要先开启 SFTP 日志：</p>



<div class="wp-container-1 wp-block-buttons">
<div class="wp-block-button aligncenter is-style-outline"><a class="wp-block-button__link" href="https://eternalcenter-jun-2022.github.io/sftp-log/" style="border-radius:0px">SFTP 日志的开启</a></div>
</div>



<h1>正文：</h1>



<h2 id="介绍">介绍</h2>



<p>作者：朱明宇<br>名称：监控普通登录记录 （排除 SFTP 登录记录只监控普通登录记录）<br>作用：监控普通登录记录 （排除 SFTP 登录记录只监控普通登录记录）</p>



<p>使用方法：<br>1. 在此脚本的分割线内写入相应的内容<br>2. 给此脚本添加执行权限<br>3. 执行此脚本<br>4. 普通登录记录会同时记录在系统日志和 $logfile 里</p>



<p>脚本分割线里的变量：<br>1. logfile=logfile.txt #用户保存记录的文件<br>2. prompt=&#8221;and no sftp info&#8221; #记录里普通登录记录的文件</p>



<h2 id="脚本">脚本</h2>



<pre class="wp-block-code"><code>#!/bin/bash

####################### Separator ########################

logfile=logfile.txt
prompt="and no sftp info"

####################### Separator ########################

checktime=`date +%Y-%m-%dT%H -d "-1 day"`

for i in `cat -n /var/log/messages | grep $check_time | grep 'Started Session' | grep -v 'root' | awk '{print $1}'`

do
   line=`sed -n $&#91;i]p /var/log/messages`
   time=`echo $line | awk '{print $1}'`
   session=`echo $line | awk '{print $6}'`
   user=`echo $line | awk '{print $9}'`
   user=${user%.}

   message="ACCESS CHECK LOG: Time:$time Session:$session $user has accessed `hostname`, $prompt"

   let sftpline=i+3

   sed -n $&#91;sftpline]p /var/log/messages | grep sftp-server &amp;&gt; /dev/null
   if &#91; $? -ne 0 ];then
           echo $message
           echo $message &gt;&gt; $logfile.txt
           logger $message
   fi
   echo
done</code></pre>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>[命令] Linux 目标网站 SSL 证书的显示 （OpenSSL 版）</title>
		<link>https://eternalcenter-jun-2022.github.io/ssl-display-openssl/</link>
		
		<dc:creator><![CDATA[Mingyu Zhu]]></dc:creator>
		<pubDate>Tue, 15 Feb 2022 13:39:10 +0000</pubDate>
				<category><![CDATA[Apache]]></category>
		<category><![CDATA[Basic Guidelines for Website building (网站建设基础指南)]]></category>
		<category><![CDATA[Chinese (中文)]]></category>
		<category><![CDATA[Django Service (服务)]]></category>
		<category><![CDATA[Nginx]]></category>
		<category><![CDATA[Nginx Security (安全)]]></category>
		<category><![CDATA[Personal Website Building (个人网站建设)]]></category>
		<category><![CDATA[Project (项目)]]></category>
		<category><![CDATA[Services (服务)]]></category>
		<category><![CDATA[System (系统)]]></category>
		<category><![CDATA[System Network & System Security & System Log (系统网络 & 系统安全 & 系统日志)]]></category>
		<category><![CDATA[System Operation (系统操作)]]></category>
		<category><![CDATA[System Operation & System Setting & System Software (系统操作 & 系统设置 & 系统软件)]]></category>
		<category><![CDATA[System Port Security (系统端口安全)]]></category>
		<category><![CDATA[System Security (系统安全)]]></category>
		<category><![CDATA[Tomcat]]></category>
		<category><![CDATA[Web Application Firewall (WAF)]]></category>
		<category><![CDATA[Website Services (网站服务)]]></category>
		<guid isPermaLink="false">https://eternalcenter-jun-2022.github.io/?p=21971</guid>

					<description><![CDATA[内容一：查看完整信息 （补充：这里以显示 eternalcenter.com 的 443 端口的 SSL 证书为例） 内容二：查看主要信息 （补充：这里以显示 eternalcenter.com 的 443 端口的 SSL 证书为例）]]></description>
										<content:encoded><![CDATA[
<h3>内容一：查看完整信息</h3>



<pre class="wp-block-code"><code># openssl s_client -connect eternalcenter.com:443
CONNECTED(00000003)
depth=2 C = US, O = Internet Security Research Group, CN = ISRG Root X1
verify return:1
depth=1 C = US, O = Let's Encrypt, CN = R3
verify return:1
depth=0 CN = eternalcenter.com
verify return:1
---
Certificate chain
 0 s:CN = eternalcenter.com
   i:C = US, O = Let's Encrypt, CN = R3
 1 s:C = US, O = Let's Encrypt, CN = R3
   i:C = US, O = Internet Security Research Group, CN = ISRG Root X1
 2 s:C = US, O = Internet Security Research Group, CN = ISRG Root X1
   i:O = Digital Signature Trust Co., CN = DST Root CA X3
---
Server certificate
-----BEGIN CERTIFICATE-----
MIIFKjCCBBKgAwIBAgISAxDxly99eBiarmHggFEmDJoMMA0GCSqGSIb3DQEBCwUA
MDIxCzAJBgNVBAYTAlVTMRYwFAYDVQQKEw1MZXQncyBFbmNyeXB0MQswCQYDVQQD
EwJSMzAeFw0yMTEyMTkxMzA4MzJaFw0yMjAzMTkxMzA4MzFaMBwxGjAYBgNVBAMT
EWV0ZXJuYWxjZW50ZXIuY29tMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKC
AQEAtCcCuOqBrWP4eo//VBEXh668EjwrE1eXz2CS4GIN4ddn0rS8LHGFOrB92R8E
OnaYeTKpZjzNM3NA/AG/Gq5mTRZGTpyTasHEb/phwXdhrtJWdbMtQjGFSg8rXSB8
cap5NGP/NxAy8FV0MbXftg5t9VgBoCMGUzioSHZTEjefq+/OZwlP7RzxZN3bwj1D
61gWSw6q1X3bsi8ttwbkkiJfvjXo2KIeGOAnY10X+FPJmVa7jonhOuljrX4CYgnd
SCxmsfgwGMUzRu27VB1rEbKqvSr6tb9KfwFiqsZd5tTi7RW6WMqA0VbDV7BbDqLP
OzcturwRtXfzHjJxssy9zhnrQQIDAQABo4ICTjCCAkowDgYDVR0PAQH/BAQDAgWg
MB0GA1UdJQQWMBQGCCsGAQUFBwMBBggrBgEFBQcDAjAMBgNVHRMBAf8EAjAAMB0G
A1UdDgQWBBQMGBCfBuZxTAS8VcBI/13ugqc2RDAfBgNVHSMEGDAWgBQULrMXt1hW
y65QCUDmH6+dixTCxjBVBggrBgEFBQcBAQRJMEcwIQYIKwYBBQUHMAGGFWh0dHA6
Ly9yMy5vLmxlbmNyLm9yZzAiBggrBgEFBQcwAoYWaHR0cDovL3IzLmkubGVuY3Iu
b3JnLzAcBgNVHREEFTATghFldGVybmFsY2VudGVyLmNvbTBMBgNVHSAERTBDMAgG
BmeBDAECATA3BgsrBgEEAYLfEwEBATAoMCYGCCsGAQUFBwIBFhpodHRwOi8vY3Bz
LmxldHNlbmNyeXB0Lm9yZzCCAQYGCisGAQQB1nkCBAIEgfcEgfQA8gB3AN+lXqto
gk8fbK3uuF9OPlrqzaISpGpejjsSwCBEXCpzAAABfdMFzUsAAAQDAEgwRgIhAMFF
1orPZPnpCyhzwX2xZAZjJnOmDGmBjAl0tHnX4nEWAiEAqZTUwjrdwZAL+kDAgpzG
Me2RnGMseDBY8Oy2sefUgsAAdwBGpVXrdfqRIDC1oolp9PN9ESxBdL79SbiFq/L8
cP5tRwAAAX3TBc1zAAAEAwBIMEYCIQDLhR0nbVHEIL1uw9hRuv/ZbFjf91W/M4Jp
od7NTMQZbAIhAKEAAfmdu0nVHklyS2At1VValwQ6vNbqd0NQ85giG606MA0GCSqG
SIb3DQEBCwUAA4IBAQB/s+rZEaNrlUyBVnbxv5X9NTBd8buBOkR1qVswlS1R2i8B
pRjeJmgbiMzM2z5Mvx0yTIiCyXXUc3YaqoyxvddaQam9nlLGr0nKX9T5DkE7y0Fh
Qg0/ievRQF86XnDqQBxDR32jj5A1nKEiJrNCqugCWTAABndW3tvzK5DOsF2BfjJC
mcjwiKaSCjFVpf+KzLWS3UEW+DRTKOLBucXpenS7QEcQu4K6ShNSL7+K6UOZEbFu
uCRjOawCJFF7EH5vzRBy696Fu4EmzCV+c4rV8K8EcuCCQQeOTWJ/93Jv6U6kGrmE
P6wlcHFy1tZhTAmXf/qcpE3sGeH58OlNNiVmNJdH
-----END CERTIFICATE-----
subject=CN = eternalcenter.com

issuer=C = US, O = Let's Encrypt, CN = R3

---
No client certificate CA names sent
Peer signing digest: SHA256
Peer signature type: RSA-PSS
Server Temp Key: X25519, 253 bits
---
SSL handshake has read 4695 bytes and written 412 bytes
Verification: OK
---
New, TLSv1.2, Cipher is ECDHE-RSA-AES256-GCM-SHA384
Server public key is 2048 bit
Secure Renegotiation IS supported
Compression: NONE
Expansion: NONE
No ALPN negotiated
SSL-Session:
    Protocol  : TLSv1.2
    Cipher    : ECDHE-RSA-AES256-GCM-SHA384
    Session-ID: D63BC88824810A4D43ACE901AD4FF2D82073BC6F0D8B2DE71F6310CA1C87707F
    Session-ID-ctx: 
    Master-Key: A6836430C394B96DDD5552867D49802F94AAC8BF5E882100F0D27185CF5CFD6A946B94D87652E44A6684FC9781D16D90
    PSK identity: None
    PSK identity hint: None
    SRP username: None
    TLS session ticket lifetime hint: 300 (seconds)
    TLS session ticket:
    0000 - bb be 55 e0 4b 6d c3 08-cd bc 45 6e 79 67 fc eb   ..U.Km....Enyg..
    0010 - 30 d5 4c 8a 5a c8 f7 13-42 4b 1d 02 ce 94 c0 b8   0.L.Z...BK......
    0020 - d7 cf f6 f0 ee 9d 49 5b-0a c8 a4 1a 8b dd 8a e0   ......I&#91;........
    0030 - 66 83 52 9b 31 4d da 9e-d5 05 1a 70 ca e9 86 5e   f.R.1M.....p...^
    0040 - f5 09 a1 1c 92 6b 64 90-b7 e1 0e ec 30 e2 26 68   .....kd.....0.&amp;h
    0050 - 49 13 10 9e 3e a5 e0 13-a2 f1 7a 7c c5 ad 99 6c   I...&gt;.....z|...l
    0060 - e9 f6 1d 46 5f cc f6 f9-c5 f6 05 49 53 78 7e ea   ...F_......ISx~.
    0070 - 8c 17 eb 8d 96 c3 3f 92-fe e0 f0 f6 86 59 05 c8   ......?......Y..
    0080 - d2 8c 27 6b 9d 65 38 20-84 d4 23 54 35 70 19 4d   ..'k.e8 ..#T5p.M
    0090 - db 35 6d f4 44 50 d7 6e-a5 87 2b 32 e5 f8 42 88   .5m.DP.n..+2..B.
    00a0 - 28 e2 ab 35 e1 2c 06 71-e5 b2 82 cb 3a 75 cc 72   (..5.,.q....:u.r
    00b0 - ed ae e1 12 ff 82 6c 3a-3a 38 7a 8c 3c 9c f1 10   ......l::8z.&lt;...
    00c0 - 78 b8 37 87 c3 a2 00 76-01 72 8c ef 3b 20 48 28   x.7....v.r..; H(

    Start Time: 1644931899
    Timeout   : 7200 (sec)
    Verify return code: 0 (ok)
    Extended master secret: yes
---
closed</code></pre>



<p>（补充：这里以显示 eternalcenter.com 的 443 端口的 SSL 证书为例）</p>



<h3>内容二：查看主要信息</h3>



<pre class="wp-block-code"><code># echo | openssl s_client -connect scc.suse.com:443 | head -n 16
CONNECTED(00000003)
depth=2 C = US, O = Internet Security Research Group, CN = ISRG Root X1
verify return:1
depth=1 C = US, O = Let's Encrypt, CN = R3
verify return:1
depth=0 CN = eternalcenter.com
verify return:1
---
Certificate chain
 0 s:CN = eternalcenter.com
   i:C = US, O = Let's Encrypt, CN = R3
 1 s:C = US, O = Let's Encrypt, CN = R3
   i:C = US, O = Internet Security Research Group, CN = ISRG Root X1
 2 s:C = US, O = Internet Security Research Group, CN = ISRG Root X1
   i:O = Digital Signature Trust Co., CN = DST Root CA X3
---</code></pre>



<p>（补充：这里以显示 eternalcenter.com 的 443 端口的 SSL 证书为例）</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>[命令] SUSE 命令 SUSEConnect （注册客户端到 SUSE Repository Mirroring Tool (RMT)）</title>
		<link>https://eternalcenter-jun-2022.github.io/suseconnect/</link>
		
		<dc:creator><![CDATA[Mingyu Zhu]]></dc:creator>
		<pubDate>Tue, 15 Feb 2022 13:27:33 +0000</pubDate>
				<category><![CDATA[Chinese (中文)]]></category>
		<category><![CDATA[Other Services (其他服务)]]></category>
		<category><![CDATA[Services (服务)]]></category>
		<category><![CDATA[SUSE Repository Mirroring Tool (RMT)]]></category>
		<category><![CDATA[System (系统)]]></category>
		<category><![CDATA[System Operation & System Setting & System Software (系统操作 & 系统设置 & 系统软件)]]></category>
		<category><![CDATA[System Software (系统软件)]]></category>
		<guid isPermaLink="false">https://eternalcenter-jun-2022.github.io/?p=21968</guid>

					<description><![CDATA[如果是 HTTP 协议： 或者： 如果是 HTTPS 协议： 或者：]]></description>
										<content:encoded><![CDATA[
<p>如果是 HTTP 协议：</p>



<pre class="wp-block-code"><code># SUSEConnect -u http://&lt;/<span style="caret-color: rgb(0, 0, 0); color: rgb(0, 0, 0); font-family: -webkit-standard; font-size: medium; white-space: normal;">SUSE Repository Mirroring Tool (RMT</span>) Server's IP address or FQDN&gt;</code></pre>



<p>或者：</p>



<pre class="wp-block-code"><code># SUSEConnect --url http://&lt;/<span style="caret-color: rgb(0, 0, 0); color: rgb(0, 0, 0); font-family: -webkit-standard; font-size: medium; white-space: normal;">SUSE Repository Mirroring Tool (RMT</span>) Server's IP address or FQDN></code></pre>



<p>如果是 HTTPS 协议：</p>



<pre class="wp-block-code"><code># SUSEConnect -u https://&lt;/<span style="caret-color: rgb(0, 0, 0); color: rgb(0, 0, 0); font-family: -webkit-standard; font-size: medium; white-space: normal;">SUSE Repository Mirroring Tool (RMT</span>) Server's IP address or FQDN&gt;</code></pre>



<p>或者：</p>



<pre class="wp-block-code"><code># SUSEConnect --url https://&lt;/<span style="caret-color: rgb(0, 0, 0); color: rgb(0, 0, 0); font-family: -webkit-standard; font-size: medium; white-space: normal;">SUSE Repository Mirroring Tool (RMT</span>) Server's IP address or FQDN></code></pre>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>[步骤] PXE 新系统模板的添加</title>
		<link>https://eternalcenter-jun-2022.github.io/pxe-template-add/</link>
		
		<dc:creator><![CDATA[Mingyu Zhu]]></dc:creator>
		<pubDate>Sat, 12 Feb 2022 15:14:50 +0000</pubDate>
				<category><![CDATA[Chinese (中文)]]></category>
		<category><![CDATA[Other Services (其他服务)]]></category>
		<category><![CDATA[Pre-boot Execution Environment (PXE)]]></category>
		<category><![CDATA[Services (服务)]]></category>
		<category><![CDATA[System (系统)]]></category>
		<category><![CDATA[System Computer & System Hardware & System Installation & System Upgradation (系统电脑 & 系统硬件 & 系统安装 & 系统升级)]]></category>
		<category><![CDATA[System Installation (系统安装)]]></category>
		<guid isPermaLink="false">https://eternalcenter-jun-2022.github.io/?p=21908</guid>

					<description><![CDATA[步骤一：准备安装镜像 1.1 从官网上下载安装镜像 （步骤略） 1.2 挂载安装镜像 1.2.1 创建用于挂载安装镜像的目录 1.2.2 挂载安装镜像 步骤二：准备用于进行 PXE 安装的数据 2.1 准备系统安装数据 2.1.1 创建用于存放系统安装数据的目录 （注意：用于存放系统安装数据的目录必须要放在能够实现 PXE 安装时网络共享的目录里（例如：通过 httpd 服务进行网络共享）） 2.1.2 拷贝安装镜像里的数据到用于存放系统安装数据的目录 2.1.2.1 拷贝安装镜像里的普通数据到用于存放系统安装数据的目录 2.1.2.2 拷贝安装镜像里的 .treeinfo 文件到用于存放系统安装数据的目录 2.2 准备安装引导文件 2.2.1 创建用于存放安装引导文件的目录 2.2.1.1 创建用于存放 BIOS 安装引导文件的目录 （注意：用于存放 BIOS 安装引导文件的目录必须要放在能够实现 TFPT 网络共享的目录里） 2.2.1.2 创建用于存放 EFI 安装引导文件的目录 （注意：用于存放 EFI 安装引导文件的目录必须要放在能够实现 TFPT 网络共享的目录里） 2.2.2 拷贝安装镜像里的安装引导文件到存放安装引导文件的目录 2.2.2.1 &#8230; <p class="link-more"><a href="https://eternalcenter-jun-2022.github.io/pxe-template-add/" class="more-link">Continue reading<span class="screen-reader-text"> "[步骤] PXE 新系统模板的添加"</span></a></p>]]></description>
										<content:encoded><![CDATA[
<h3 id="步骤一-准备安装镜像1-1-从官网上下载安装镜像">步骤一：准备安装镜像</h3>



<h4 id="步骤一-准备安装镜像1-1-从官网上下载安装镜像">1.1 从官网上下载安装镜像</h4>



<p>（步骤略）</p>



<h4 id="1-2-挂载安装镜像1-2-1-创建用于挂载安装镜像的目录">1.2 挂载安装镜像</h4>



<h5 id="1-2-挂载安装镜像1-2-1-创建用于挂载安装镜像的目录">1.2.1 创建用于挂载安装镜像的目录</h5>



<pre class="wp-block-code"><code># mkdir &lt;directory for mounting the image&gt;</code></pre>



<h5 id="1-2-2-挂载安装镜像">1.2.2 挂载安装镜像</h5>



<pre class="wp-block-code"><code># mount -t iso9660 &lt;image&gt; &lt;directory for mounting the image&gt;</code></pre>



<h3 id="步骤二-准备用于进行-pxe-安装的数据2-1-准备系统安装数据2-1-1-创建用于存放系统安装数据的目录">步骤二：准备用于进行 PXE 安装的数据</h3>



<h4 id="步骤二-准备用于进行-pxe-安装的数据2-1-准备系统安装数据2-1-1-创建用于存放系统安装数据的目录">2.1 准备系统安装数据</h4>



<h5 id="步骤二-准备用于进行-pxe-安装的数据2-1-准备系统安装数据2-1-1-创建用于存放系统安装数据的目录">2.1.1 创建用于存放系统安装数据的目录</h5>



<pre class="wp-block-code"><code># mkdir &lt;directory of data for installing the system&gt;</code></pre>



<p>（注意：用于存放系统安装数据的目录必须要放在能够实现 PXE 安装时网络共享的目录里（例如：通过 httpd 服务进行网络共享））</p>



<h5 id="2-1-2-拷贝安装镜像里的数据到用于存放系统安装数据的目录2-1-2-1-拷贝安装镜像里的普通数据到用于存放系统安装数据的目录">2.1.2 拷贝安装镜像里的数据到用于存放系统安装数据的目录</h5>



<h5 id="2-1-2-拷贝安装镜像里的数据到用于存放系统安装数据的目录2-1-2-1-拷贝安装镜像里的普通数据到用于存放系统安装数据的目录">2.1.2.1 拷贝安装镜像里的普通数据到用于存放系统安装数据的目录</h5>



<pre class="wp-block-code"><code># cp -rp &lt;directory for mounting the image&gt;/* &lt;directory of data for installing the system&gt;</code></pre>



<h5 id="2-1-2-2-拷贝安装镜像里的-treeinfo-文件到用于存放系统安装数据的目录">2.1.2.2 拷贝安装镜像里的 .treeinfo 文件到用于存放系统安装数据的目录</h5>



<pre class="wp-block-code"><code># cp -rp &lt;directory for mounting the image&gt;/.treeinfo &lt;directory of data for installing the system&gt;</code></pre>



<h4 id="2-2-准备安装引导文件2-2-1-创建用于存放安装引导文件的目录2-2-1-1-创建用于存放-bios-安装引导文件的目录">2.2 准备安装引导文件</h4>



<h5 id="2-2-准备安装引导文件2-2-1-创建用于存放安装引导文件的目录2-2-1-1-创建用于存放-bios-安装引导文件的目录">2.2.1 创建用于存放安装引导文件的目录</h5>



<h5 id="2-2-准备安装引导文件2-2-1-创建用于存放安装引导文件的目录2-2-1-1-创建用于存放-bios-安装引导文件的目录">2.2.1.1 创建用于存放 BIOS 安装引导文件的目录</h5>



<pre class="wp-block-code"><code># mkdir &lt;directory of BIOS boot file for installing the system&gt;</code></pre>



<p>（注意：用于存放 BIOS 安装引导文件的目录必须要放在能够实现 TFPT 网络共享的目录里）</p>



<h5 id="2-2-1-2-创建用于存放-efi-安装引导文件的目录">2.2.1.2 创建用于存放 EFI 安装引导文件的目录</h5>



<pre class="wp-block-code"><code># mkdir &lt;directory of EFI boot file for installing the system&gt;</code></pre>



<p>（注意：用于存放 EFI 安装引导文件的目录必须要放在能够实现 TFPT 网络共享的目录里）</p>



<h5 id="2-2-2-拷贝安装镜像里的安装引导文件到存放安装引导文件的目录2-2-2-1-拷贝安装镜像里的-bios-安装引导文件到存放-bios-安装引导文件的目录">2.2.2 拷贝安装镜像里的安装引导文件到存放安装引导文件的目录</h5>



<h5 id="2-2-2-拷贝安装镜像里的安装引导文件到存放安装引导文件的目录2-2-2-1-拷贝安装镜像里的-bios-安装引导文件到存放-bios-安装引导文件的目录">2.2.2.1 拷贝安装镜像里的 BIOS 安装引导文件到存放 BIOS 安装引导文件的目录</h5>



<p>如果是 Rocky Linux &amp; RHEL 的话则拷贝 initrd.img 文件、TRANS.TBL 文件和 vmlinuz 文件：</p>



<pre class="wp-block-code"><code># curl &lt;The URL of the network share when PXE installing&gt;/&lt;directory of data for installing the system&gt;/images/pxeboot/initrd.img -O &lt;directory of BIOS boot file for installing the system&gt;/initrd.img
# curl &lt;The URL of the network share when PXE installing&gt;/&lt;directory of data for installing the system&gt;/images/pxeboot/TRANS.TBL -O &lt;directory of BIOS boot file for installing the system&gt;/TRANS.TBL
# curl &lt;The URL of the network share when PXE installing&gt;/&lt;directory of data for installing the system&gt;/images/pxeboot/vmlinuz -O &lt;directory of BIOS boot file for installing the system&gt;/vmlinuz</code></pre>



<p>如果是 openSUSE &amp; SLE 的话则拷贝 linux 文件和 initrd 文件：</p>



<pre class="wp-block-code"><code># curl &lt;The URL of the network share when PXE installing&gt;/&lt;directory of data for installing the system&gt;/boot/x86_64/loader/linux -O &lt;directory of BIOS boot file for installing the system&gt;/linux
# curl &lt;The URL of the network share when PXE installing&gt;/&lt;directory of data for installing the system&gt;/boot/x86_64/loader/initrd -O &lt;directory of BIOS boot file for installing the system&gt;/initrd</code></pre>



<h5 id="2-2-2-2-拷贝安装镜像里的-efi-安装引导文件到存放-efi-安装引导文件的目录">2.2.2.2 拷贝安装镜像里的 EFI 安装引导文件到存放 EFI 安装引导文件的目录</h5>



<p>如果是 Rocky Linux &amp; RHEL 的话则拷贝 initrd.img 文件、TRANS.TBL 文件和 vmlinuz 文件：</p>



<pre class="wp-block-code"><code># curl &lt;The URL of the network share when PXE installing&gt;/&lt;directory of data for installing the system&gt;/images/pxeboot/initrd.img -O &lt;directory of EFI boot file for installing the system&gt;/initrd.img
# curl &lt;The URL of the network share when PXE installing&gt;/&lt;directory of data for installing the system&gt;/images/pxeboot/TRANS.TBL -O &lt;directory of EFI boot file for installing the system&gt;/TRANS.TBL
# curl &lt;The URL of the network share when PXE installing&gt;/&lt;directory of data for installing the system&gt;/images/pxeboot/vmlinuz -O &lt;directory of EFI boot file for installing the system&gt;/vmlinuz</code></pre>



<p>如果是 openSUSE &amp; SLE 的话则拷贝 linux 文件和 initrd 文件：</p>



<pre class="wp-block-code"><code># curl &lt;The URL of the network share when PXE installing&gt;/&lt;directory of data for installing the system&gt;/boot/x86_64/loader/linux -O &lt;directory of EFI boot file for installing the system&gt;/linux
# curl &lt;The URL of the network share when PXE installing&gt;/&lt;directory of data for installing the system&gt;/boot/x86_64/loader/initrd -O &lt;directory of EFI boot file for installing the system&gt;/initrd</code></pre>



<h4 id="2-3-准备系统安装配置文件2-3-1-进入到用于存放系统安装配置文件的目录">2.3 准备系统安装配置文件</h4>



<h5 id="2-3-准备系统安装配置文件2-3-1-进入到用于存放系统安装配置文件的目录">2.3.1 进入到用于存放系统安装配置文件的目录</h5>



<pre class="wp-block-code"><code># cd &lt;directory of profile for installing the system&gt;</code></pre>



<p>（注意：进入到用于存放系统安装配置文件的目录必须要放在能够实现 PXE 安装时网络共享的目录里（例如：通过 httpd 服务进行网络共享））</p>



<h5 id="2-3-2-创建系统安装配置文件2-3-2-1-创建-bios-系统安装配置文件">2.3.2 创建系统安装配置文件</h5>



<h5 id="2-3-2-创建系统安装配置文件2-3-2-1-创建-bios-系统安装配置文件">2.3.2.1 创建 BIOS 系统安装配置文件</h5>



<p>如果是 Rocky Linux &amp; RHEL 的话</p>



<pre class="wp-block-code"><code># vim &lt;BIOS system installation profile&gt;</code></pre>



<p>（步骤略）</p>



<p>（<br>补充：<br>1) 如果是 Rocky Linux &amp; RHEL 的话系统安装配置文件是 CFG 文件，文件名最好以 .cfg 后缀结尾<br>2) 如果是 openSUSE &amp; SLE 的话系统安装配置文件是 XML 文件，文件名最好以 .xml 后缀结尾<br>）</p>



<h5 id="2-3-2-2-创建-efi-系统安装配置文件">2.3.2.2 创建 EFI 系统安装配置文件</h5>



<pre class="wp-block-code"><code># vim &lt;EFI system installation profile&gt;</code></pre>



<p>（步骤略）</p>



<p>（<br>补充：<br>1) 如果是 Rocky Linux &amp; RHEL 的话系统安装配置文件是 CFG 文件，文件名最好以 .cfg 后缀结尾<br>2) 如果是 openSUSE &amp; SLE 的话系统安装配置文件是 XML 文件，文件名最好以 .xml 后缀结尾<br>）</p>



<h5 id="2-3-3-设置系统安装配置文件的权限2-3-3-1-设置-bios-系统安装配置文件的权限">2.3.3 设置系统安装配置文件的权限</h5>



<h5 id="2-3-3-设置系统安装配置文件的权限2-3-3-1-设置-bios-系统安装配置文件的权限">2.3.3.1 设置 BIOS 系统安装配置文件的权限</h5>



<pre class="wp-block-code"><code># chmod 755 &lt;BIOS system installation profile&gt;</code></pre>



<h5 id="2-3-3-2-设置-efi-系统安装配置文件的权限">2.3.3.2 设置 EFI 系统安装配置文件的权限</h5>



<pre class="wp-block-code"><code># chmod 755 &lt;EFI system installation profile&gt;</code></pre>



<h4 id="2-4-修改系统安装菜单文件-pxelinux-cfg2-4-1-修改-bios-系统安装菜单文件-pxelinux-cfg">2.4 修改系统安装菜单文件 pxelinux.cfg</h4>



<h5 id="2-4-修改系统安装菜单文件-pxelinux-cfg2-4-1-修改-bios-系统安装菜单文件-pxelinux-cfg">2.4.1 修改 BIOS 系统安装菜单文件 pxelinux.cfg</h5>



<pre class="wp-block-code"><code># vim &lt;directory of file for BIOS system installation menu&gt;/pxelinux.cfg</code></pre>



<p>如果是 Rocky Linux &amp; RHEL 的话，添加以下内容：</p>



<pre class="wp-block-code"><code>......
label Rocky Linux or RHEL
  menu label ^Installation Rocky Linux or RHEL
  kernel &lt;relative directory of pxelinux.cfg of BIOS boot file for installing the system&gt;/vmlinuz
  append initrd=/&lt;relative directory of pxelinux.cfg of BIOS boot file for installing the system&gt;/initrd.img ks=&lt;The URL of the network share when PXE installing&gt;/&lt;BIOS system installation profile&gt;</code></pre>



<p>（注意：这里的 vmlinuz 文件和 initrd.im 文件的位置要写 pxelinux.cfg 文件的相对路径）</p>



<p>如果是 openSUSE &amp; SLE 的话，添加以下内容：</p>



<pre class="wp-block-code"><code>......
label openSUSE or SLE
  menu label ^Installation openSUSE or SLE
  kernel &lt;relative directory of pxelinux.cfg of BIOS boot file for installing the system&gt;/linux
  append initrd=&lt;relative directory of pxelinux.cfg of BIOS boot file for installing the system&gt;/initrd splash=silent showopts install=&lt;The URL of the network share when PXE installing&gt;/&lt;directory of data for installing the system&gt;/ autoyast=&lt;The URL of the network share when PXE installing&gt;/&lt;BIOS system installation profile&gt;</code></pre>



<p>（注意：这里的 linux 文件和 initrd 文件的位置要写 pxelinux.cfg 文件的相对路径）</p>



<p>（注意：用于存放 BIOS 系统安装菜单文件的目录必须要放在能够实现 TFPT 网络共享的目录里）</p>



<h5 id="2-4-2-修改-efi-系统安装菜单文件-grub-cfg">2.4.2 修改 EFI 系统安装菜单文件 grub.cfg</h5>



<pre class="wp-block-code"><code># vim &lt;directory of file for EFI system installation menu&gt;/grub.cfg</code></pre>



<p>如果是 Rocky Linux &amp; RHEL 的话，添加以下内容：</p>



<pre class="wp-block-code"><code>......
label Rocky Linux or RHEL
  menu label ^Installation Rocky Linux or RHEL
  kernel &lt;relative directory of pxelinux.cfg of EFI boot file for installing the system&gt;/vmlinuz
  append initrd=/&lt;relative directory of pxelinux.cfg of EFI boot file for installing the system&gt;/initrd.img ks=&lt;The URL of the network share when PXE installing&gt;/&lt;EFI system installation profile&gt;</code></pre>



<p>（注意：这里的 vmlinuz 文件和 initrd.im 文件的位置要写 pxelinux.cfg 文件的相对路径）</p>



<p>如果是 openSUSE &amp; SLE 的话，添加以下内容：</p>



<pre class="wp-block-code"><code>......
label openSUSE or SLE
  menu label ^Installation openSUSE or SLE
  kernel &lt;relative directory of pxelinux.cfg of EFI boot file for installing the system&gt;/linux
  append initrd=&lt;relative directory of pxelinux.cfg of EFI boot file for installing the system&gt;/initrd splash=silent showopts install=&lt;The URL of the network share when PXE installing&gt;/&lt;directory of data for installing the system&gt;/ autoyast=&lt;The URL of the network share when PXE installing&gt;/&lt;EFI system installation profile&gt;</code></pre>



<p>（注意：这里的 linux 文件和 initrd 文件的位置要写 pxelinux.cfg 文件的相对路径）</p>



<p>（注意：用于存放 EFI 系统安装菜单文件的目录必须要放在能够实现 TFPT 网络共享的目录里）</p>



<h3 id="步骤三-取消挂载安装镜像-1">步骤三：取消挂载安装镜像</h3>



<pre class="wp-block-code"><code># umount &lt;directory for mounting the image&gt;</code></pre>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>[步骤] SFTP 日志的开启</title>
		<link>https://eternalcenter-jun-2022.github.io/sftp-log/</link>
		
		<dc:creator><![CDATA[Mingyu Zhu]]></dc:creator>
		<pubDate>Wed, 26 Jan 2022 14:34:34 +0000</pubDate>
				<category><![CDATA[Chinese (中文)]]></category>
		<category><![CDATA[Services (服务)]]></category>
		<category><![CDATA[SFTP]]></category>
		<category><![CDATA[Storage Services (存储服务)]]></category>
		<guid isPermaLink="false">https://eternalcenter-jun-2022.github.io/?p=21410</guid>

					<description><![CDATA[如果是 CentOS Linux &#38; RHEL，将以下内容： 修改为： 如果是 openSUSE &#38; SLE， 将以下内容： 修改为： （补充：此时当通过 SFTP 登录系统时，系统日志记录文件 /var/log/messages 里登录记录后面会紧跟一行带 sftp-server 的记录）]]></description>
										<content:encoded><![CDATA[
<pre class="wp-block-code"><code># vim /etc/sshd/sshd_config</code></pre>



<p>如果是 CentOS Linux &amp; RHEL，将以下内容：</p>



<pre class="wp-block-code"><code>......
Subsystem       sftp    /usr/libexec/openssh/sftp-server
......</code></pre>



<p>修改为：</p>



<pre class="wp-block-code"><code>......
Subsystem       sftp    /usr/libexec/openssh/sftp-server -l INFO
......</code></pre>



<p>如果是 openSUSE &amp; SLE， 将以下内容：</p>



<pre class="wp-block-code"><code>......
Subsystem       sftp    /usr/lib/ssh/sftp-server
......</code></pre>



<p>修改为：</p>



<pre class="wp-block-code"><code>......
Subsystem       sftp    /usr/lib/ssh/sftp-server -l INFO
......</code></pre>



<p>（补充：此时当通过 SFTP 登录系统时，系统日志记录文件 /var/log/messages 里登录记录后面会紧跟一行带 sftp-server 的记录）</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>[STEP] Red Hat Satellite client register</title>
		<link>https://eternalcenter-jun-2022.github.io/red-hat-satellite-client-register/</link>
		
		<dc:creator><![CDATA[Mingyu Zhu]]></dc:creator>
		<pubDate>Tue, 18 Jan 2022 14:41:36 +0000</pubDate>
				<category><![CDATA[English (英文)]]></category>
		<category><![CDATA[Other Services (其他服务)]]></category>
		<category><![CDATA[Red Hat Satellite]]></category>
		<category><![CDATA[Services (服务)]]></category>
		<guid isPermaLink="false">https://eternalcenter-jun-2022.github.io/?p=21287</guid>

					<description><![CDATA[Step One: Add domain name resolution into /etc/hosts Add the following: Step Two: Install katello-ca-consumer-latest.noarch.rpm 2.1 Download katello-ca-consumer-latest.noarch.rpm 2.2 Install katello-ca-consumer-latest.noarch.rpm Step Three: Register to Red Hat Satellite Server Step Four: Install katello-host-tools, katello-host-tools-tracer and katello-agent 4.1 Enable rhel-*-satellite-tools-*-rpms repo or satellite-tools-*-rhel-*-rpms RHEL 7: RHEL 8: 4.2 Install katello-host-tools, katello-host-tools-tracer and katello-agent Step Five: Check &#8230; <p class="link-more"><a href="https://eternalcenter-jun-2022.github.io/red-hat-satellite-client-register/" class="more-link">Continue reading<span class="screen-reader-text"> "[STEP] Red Hat Satellite client register"</span></a></p>]]></description>
										<content:encoded><![CDATA[
<h3>Step One: Add domain name resolution into /etc/hosts</h3>



<pre class="wp-block-code"><code># vim /etc/hosts</code></pre>



<p>Add the following:</p>



<pre class="wp-block-code"><code>......
&lt;Redhat Satellite IP address&gt; &lt;Redhat Satellite Server FQDN&gt;</code></pre>



<h3>Step Two: Install katello-ca-consumer-latest.noarch.rpm</h3>



<h4>2.1 Download katello-ca-consumer-latest.noarch.rpm</h4>



<pre class="wp-block-code"><code># curl --insecure --output katello-ca-consumer-latest.noarch.rpm https://&lt;Redhat/ Satellite Server FQDN&gt;/pub/katello-ca-consumer-latest.noarch.rpm</code></pre>



<h4>2.2 Install katello-ca-consumer-latest.noarch.rpm</h4>



<pre class="wp-block-code"><code># yum -y localinstall katello-ca-consumer-latest.noarch.rpm</code></pre>



<h3>Step Three: Register to Red Hat Satellite Server</h3>



<pre class="wp-block-code"><code># subscription-manager register --org="&lt;organization&gt;" --activationkey="&lt;activation key&gt;"</code></pre>



<h3>Step Four: Install katello-host-tools, katello-host-tools-tracer and katello-agent</h3>



<h4>4.1 Enable rhel-*-satellite-tools-*-rpms repo or satellite-tools-*-rhel-*-rpms</h4>



<p>RHEL 7:</p>



<pre class="wp-block-code"><code># subscription-manager repos --enable=rhel-\*-satellite-tools-\*-rpms</code></pre>



<p>RHEL 8:</p>



<pre class="wp-block-code"><code># subscription-manager repos --enable=satellite-tools-\*-rhel-\*-rpms
# subscription-manager repos --disable=satellite-tools-\*-rhel-\*-eus-rpms</code></pre>



<h4>4.2 Install katello-host-tools, katello-host-tools-tracer and katello-agent</h4>



<pre class="wp-block-code"><code># yum -y install katello-host-tools; yum -y install katello-host-tools-tracer; yum -y install katello-agent</code></pre>



<h3>Step Five: Check</h3>



<h4>5.1 Check registration information</h4>



<pre class="wp-block-code"><code># subscription-manager identity</code></pre>



<h4>5.2 Check license</h4>



<pre class="wp-block-code"><code># subscription-manager list --consumed</code></pre>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>[步骤] Red Hat Satellite Server 客户端注册的取消</title>
		<link>https://eternalcenter-jun-2022.github.io/red-hat-satellite-server-client-unregister/</link>
		
		<dc:creator><![CDATA[Mingyu Zhu]]></dc:creator>
		<pubDate>Tue, 18 Jan 2022 13:54:51 +0000</pubDate>
				<category><![CDATA[Chinese (中文)]]></category>
		<category><![CDATA[Other Services (其他服务)]]></category>
		<category><![CDATA[Red Hat Satellite]]></category>
		<category><![CDATA[Services (服务)]]></category>
		<guid isPermaLink="false">https://eternalcenter-jun-2022.github.io/?p=21280</guid>

					<description><![CDATA[步骤一：取消 Red Hat Satellite Server 客户端的注册 步骤二：清理 Red Hat Satellite Server 客户端的注册信息]]></description>
										<content:encoded><![CDATA[
<h3>步骤一：取消 Red Hat Satellite Server 客户端的注册</h3>



<pre class="wp-block-code"><code># subscription-manager unregister</code></pre>



<h3>步骤二：清理 Red Hat Satellite Server 客户端的注册信息 </h3>



<pre class="wp-block-code"><code># subscription-manager clean</code></pre>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>[步骤] GitHub 代码的更新 （令牌版）</title>
		<link>https://eternalcenter-jun-2022.github.io/github-push-token/</link>
		
		<dc:creator><![CDATA[Mingyu Zhu]]></dc:creator>
		<pubDate>Sat, 01 Jan 2022 13:33:23 +0000</pubDate>
				<category><![CDATA[Chinese (中文)]]></category>
		<category><![CDATA[Git]]></category>
		<category><![CDATA[Other Services (其他服务)]]></category>
		<category><![CDATA[Services (服务)]]></category>
		<guid isPermaLink="false">https://eternalcenter-jun-2022.github.io/?p=20763</guid>

					<description><![CDATA[步骤一：在 GitHub 官网上生成令牌 1.1 在 https://github.com/ 上登录或注册 GitHub 用户 （步骤略） 1.2 在 GitHub 上创建仓库 右上角 + &#8211;&#62; New repository &#8211;&#62; 填写 Repository name &#8211;&#62; 勾选 Public &#8211;&#62; Create repository （注意：只有当要使用的仓库还没有创建时才需要进行此步骤） 1.3 在 GitHub 官网上生成令牌 右上角的头像 &#8211;&#62; Settings &#8211;&#62; Developer settings &#8211;&#62; Personal access tokens &#8211;&#62; Generate new token &#8211;&#62; 勾选需要的 scopes &#8211;&#62; Generate token 1.4 &#8230; <p class="link-more"><a href="https://eternalcenter-jun-2022.github.io/github-push-token/" class="more-link">Continue reading<span class="screen-reader-text"> "[步骤] GitHub 代码的更新 （令牌版）"</span></a></p>]]></description>
										<content:encoded><![CDATA[
<h3 id="步骤一-在-github-官网上生成令牌-1-1-在-https-github-com-上登录或注册-github-用户">步骤一：在 GitHub 官网上生成令牌</h3>



<h4 id="步骤一-在-github-官网上生成令牌-1-1-在-https-github-com-上登录或注册-github-用户">1.1 在 https://github.com/ 上登录或注册 GitHub 用户</h4>



<p>（步骤略）</p>



<h4 id="1-2-在-github-上创建仓库">1.2 在 GitHub 上创建仓库</h4>



<p>右上角 + &#8211;&gt; New repository &#8211;&gt; 填写 Repository name &#8211;&gt; 勾选 Public &#8211;&gt; Create repository</p>



<p>（注意：只有当要使用的仓库还没有创建时才需要进行此步骤）</p>



<h4 id="1-3-在-github-官网上生成令牌">1.3 在 GitHub 官网上生成令牌</h4>



<p>右上角的头像 &#8211;&gt; Settings &#8211;&gt; Developer settings &#8211;&gt; Personal access tokens &#8211;&gt; Generate new token &#8211;&gt; 勾选需要的 scopes &#8211;&gt; Generate token</p>



<h4 id="1-4-复制生成的令牌">1.4 复制生成的令牌</h4>



<p>（步骤略）</p>



<h3 id="步骤二-更新-github-代码-2-1-进入有代码需要更新的目录">步骤二：更新 GitHub 代码</h3>



<h4 id="步骤二-更新-github-代码-2-1-进入有代码需要更新的目录">2.1 进入有代码需要更新的目录</h4>



<pre class="wp-block-code"><code># cd github</code></pre>



<p>（补充：这里以进入 github 目录为例）</p>



<h4 id="2-2-初始化-git-环境">2.2 初始化 Git 环境</h4>



<pre class="wp-block-code"><code># git init</code></pre>



<h4 id="2-3-添加需要更新的代码">2.3 添加需要更新的代码</h4>



<pre class="wp-block-code"><code># git add *</code></pre>



<p>（补充：这里以添加当前目录下的所有文件为例）</p>



<h4 id="2-4-提交刚刚的添加">2.4 提交刚刚的添加</h4>



<pre class="wp-block-code"><code># git commit -m "last commit"</code></pre>



<p>（补充：这里以提交时添加 “last commit” 备注为例）</p>



<h4 id="2-5-创建或选择代码库的分支">2.5 创建或选择代码库的分支</h4>



<pre class="wp-block-code"><code># git branch -M main</code></pre>



<p>（补充：这里以创建或选择库里的 main 分支为例）</p>



<h4 id="2-6-添加-github-源">2.6 添加 GitHub 源</h4>



<pre class="wp-block-code"><code># git remote add origin git@github.com:eternalcenter-now/eternalcenter-now.github.io</code></pre>



<p>（补充：这里以添加 GitHub 的 eternalcenter-now 用户的 eternalcenter-now.github.io 库为例）</p>



<p>（注意：这里的 eternalcenter-now 用户和 eternalcenter-now.github.io 库是指在 1.1、1.2 上创建的用户和库）</p>



<h4 id="2-7-通过令牌设置-github-源">2.7 通过令牌设置 GitHub 源</h4>



<pre class="wp-block-code"><code># git remote set-url origin https://gafafhp_Nfaodfwiixma8hPpds4e6asdflim@github.com/eternalcenter-now/eternalcenter-now.github.io</code></pre>



<p>（补充：这里以使用 GitHub 的 gafafhp_Nfaodfwiixma8hPpds4e6asdflim 令牌、eternalcenter-now 用户的 eternalcenter-now.github.io 库为例）</p>



<p>（注意：这里的 eternalcenter-now 用户、eternalcenter-now.github.io 库和 gafafhp_Nfaodfwiixma8hPpds4e6asdflim 令牌是指在 1.1、1.2、1.3 上创建的用户、库和生成的令牌）</p>



<h4 id="2-8-将代码更新至-github">2.8 将代码更新至 GitHub</h4>



<pre class="wp-block-code"><code># git push -u origin main</code></pre>



<p>（补充：这里以将代码更新至 main 分支为例）</p>
]]></content:encoded>
					
		
		
			</item>
	</channel>
</rss>
